package com.akosgyongyosi.cashflow.service;

import com.akosgyongyosi.cashflow.entity.*;
import com.akosgyongyosi.cashflow.repository.CashflowPlanRepository;
import com.akosgyongyosi.cashflow.repository.TransactionRepository;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.temporal.IsoFields;
import java.util.List;

@Service
public class PlanGenerationService {

    private final TransactionRepository transactionRepository;
    private final CashflowPlanRepository planRepository;

    public PlanGenerationService(TransactionRepository transactionRepository,
                                 CashflowPlanRepository planRepository) {
        this.transactionRepository = transactionRepository;
        this.planRepository = planRepository;
    }

    public CashflowPlan generatePlanFromLastYear(LocalDate from, LocalDate to, String planName) {
        // 1) Create a new plan 
        CashflowPlan plan = new CashflowPlan();
        plan.setPlanName(planName);
        plan.setStartDate(from);
        plan.setEndDate(to);
        plan.setDescription("Autogenerated from actuals: " + from + " - " + to);

        // Fetch transactions from the previous year within the given date range
        List<Transaction> txList = transactionRepository.findByBookingDateBetween(from, to);

        // 2) Convert each transaction into a plan line item using weekly granularity
        for (Transaction tx : txList) {
            PlanLineItem item = new PlanLineItem();
            item.setPlan(plan);

            // Extract week number from transaction date
            int week = tx.getBookingDate().get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);

            // Decide if this transaction is RECURRING or ONE_TIME
            if (isRecurringTransaction(tx)) {
                item.setType(LineItemType.RECURRING);
                item.setFrequency(determineFrequency(tx));
            } else {
                item.setType(LineItemType.ONE_TIME);
                item.setFrequency(Frequency.ONE_TIME);
            }

            // Set other transaction details
            item.setTitle("Imported from Tx ID: " + tx.getId());
            item.setAmount(tx.getAmount());
            item.setCategory(tx.getCategory());
            item.setStartWeek(week);
            item.setEndWeek(week);  // For now, assume one-time transactions only happen in one week

            plan.getLineItems().add(item);
        }

        // 3) Save the plan and return it
        return planRepository.save(plan);
    }

    /**
     * Determines if a transaction should be classified as RECURRING.
     * This logic can be improved based on how regular transactions appear.
     */
    private boolean isRecurringTransaction(Transaction tx) {
        // Example: If the same category appears multiple times in different weeks
        return tx.getCategory() != null && tx.getAmount().compareTo(BigDecimal.ZERO) != 0;
    }

    /**
     * Determines the frequency of a recurring transaction based on the pattern.
     */
    private Frequency determineFrequency(Transaction tx) {
        // This can be improved with historical analysis, but hereâ€™s a simple logic:
        if (tx.getMemo().toLowerCase().contains("salary")) {
            return Frequency.MONTHLY;  // Salaries usually paid monthly
        }

        if (tx.getMemo().toLowerCase().contains("rent")) {
            return Frequency.QUARTERLY;  // Example assumption
        }
        return Frequency.WEEKLY;  // Default to weekly if recurring
    }
}
