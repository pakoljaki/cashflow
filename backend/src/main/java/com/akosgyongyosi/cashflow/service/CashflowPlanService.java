package com.akosgyongyosi.cashflow.service;

import com.akosgyongyosi.cashflow.entity.*;
import com.akosgyongyosi.cashflow.repository.CashflowPlanRepository;
import com.akosgyongyosi.cashflow.repository.HistoricalTransactionRepository;
import com.akosgyongyosi.cashflow.repository.TransactionRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.*;

@Service
public class CashflowPlanService {

    private final CashflowPlanRepository planRepository;
    private final TransactionRepository transactionRepository;
    
    public CashflowPlanService(CashflowPlanRepository planRepository,
                               TransactionRepository transactionRepository ) {
        this.planRepository = planRepository;
        this.transactionRepository = transactionRepository;
    }

    public Optional<CashflowPlan> getPlan(Long planId) {
        return planRepository.findById(planId);
    }

    public List<CashflowPlan> findAll() {
        return planRepository.findAll();
    }    

    @Transactional
    public CashflowPlan createPlanForInterval(String planName, LocalDate start, LocalDate end, String groupKey) {
        return createPlanForInterval(planName, start, end, ScenarioType.REALISTIC, BigDecimal.ZERO, groupKey);
    }

    @Transactional
    public CashflowPlan createPlanForInterval(String planName,
                                              LocalDate start,
                                              LocalDate end,
                                              ScenarioType scenario,
                                              BigDecimal startBalance,
                                              String groupKey) {
        CashflowPlan plan = new CashflowPlan();
        plan.setPlanName(planName);
        plan.setStartDate(start);
        plan.setEndDate(end);
        plan.setDescription("Autogenerated from actuals: " + start + " - " + end);
        plan.setGroupKey(groupKey);
        plan.setScenario(scenario);
        plan.setStartBalance(startBalance);
        plan.setBaselineTransactions(new ArrayList<>());

        List<Transaction> lastYearTransactions = transactionRepository
                .findByBookingDateBetween(start.minusYears(1), end.minusYears(1));

        for (Transaction tx : lastYearTransactions) {
            HistoricalTransaction hist = convertTransactionToHistorical(tx, plan);
            plan.getBaselineTransactions().add(hist);
        }

        return planRepository.save(plan);
    }

    @Transactional
    public List<CashflowPlan> createAllScenarioPlans(String basePlanName, LocalDate start, LocalDate end, BigDecimal startBalance) {
        String groupKey = UUID.randomUUID().toString(); 

        CashflowPlan worst = createPlanForInterval(basePlanName + "-WORST", start, end, ScenarioType.WORST, startBalance, groupKey);
        CashflowPlan real = createPlanForInterval(basePlanName + "-REALISTIC", start, end, ScenarioType.REALISTIC, startBalance, groupKey);
        CashflowPlan best = createPlanForInterval(basePlanName + "-BEST", start, end, ScenarioType.BEST, startBalance, groupKey);

        return List.of(worst, real, best);
    }

    @Transactional(readOnly = true)
    public List<CashflowPlan> findAllByGroupKey(String groupKey) {
        return planRepository.findByGroupKey(groupKey);
    }

    private HistoricalTransaction convertTransactionToHistorical(Transaction tx, CashflowPlan plan) {
        HistoricalTransaction hist = new HistoricalTransaction();
        hist.setTransactionDate(tx.getBookingDate().plusYears(1));
        hist.setAmount(tx.getAmount());
        hist.setCategory(tx.getCategory());
        hist.setCashflowPlan(plan);
        return hist;
    }
}
