package com.akosgyongyosi.cashflow.service;

import com.akosgyongyosi.cashflow.entity.CashflowPlan;
import com.akosgyongyosi.cashflow.entity.HistoricalTransaction;
import com.akosgyongyosi.cashflow.entity.Transaction;
import com.akosgyongyosi.cashflow.repository.CashflowPlanRepository;
import com.akosgyongyosi.cashflow.repository.HistoricalTransactionRepository;
import com.akosgyongyosi.cashflow.repository.TransactionRepository;
import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class CashflowPlanService {

    private final CashflowPlanRepository planRepository;
    private final TransactionRepository transactionRepository;
    private final HistoricalTransactionRepository historicalTransactionRepository;

    public CashflowPlanService(CashflowPlanRepository planRepository,
                               TransactionRepository transactionRepository,
                               HistoricalTransactionRepository historicalTransactionRepository) {
        this.planRepository = planRepository;
        this.transactionRepository = transactionRepository;
        this.historicalTransactionRepository = historicalTransactionRepository;
    }

    public Optional<CashflowPlan> getPlan(Long planId) {
        return planRepository.findById(planId);
    }

    private HistoricalTransaction convertTransactionToHistorical(Transaction tx, CashflowPlan plan) {
        HistoricalTransaction hist = new HistoricalTransaction();
        hist.setTransactionDate(tx.getBookingDate().plusYears(1));
        hist.setAmount(tx.getAmount());
        hist.setCategory(tx.getCategory());
        hist.setCashflowPlan(plan); 
        return hist;
    }

    public CashflowPlan createPlanForInterval(String planName, LocalDate start, LocalDate end) {
      
    CashflowPlan plan = new CashflowPlan();
    plan.setPlanName(planName);
    plan.setStartDate(start);
    plan.setEndDate(end);
    plan.setDescription("Autogenerated from actuals: " + start + " - " + end);
    plan.setBaselineTransactions(new ArrayList<>());

    List<Transaction> lastYearTransactions = transactionRepository
        .findByBookingDateBetween(start.minusYears(1), end.minusYears(1));

    for (Transaction tx : lastYearTransactions) {
        HistoricalTransaction hist = convertTransactionToHistorical(tx, plan);
        // hist.setCashflowPlan(plan); 
        plan.getBaselineTransactions().add(hist);
    }

    // historicalTransactionRepository.saveAll(plan.getBaselineTransactions()); // if cascade wouldnt work

    return planRepository.save(plan);
    }
}
